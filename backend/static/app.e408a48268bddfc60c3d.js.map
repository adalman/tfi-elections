{"version":3,"sources":["webpack:///./app/models/TodoModel.ts","webpack:///./app/models/ElectionModel.ts","webpack:///./app/models/index.ts","webpack:///./app/utils/index.ts","webpack:///./app/containers/Home/style.css","webpack:///./app/containers/Admin/style.css","webpack:///./app/containers/Vote/style.css","webpack:///./app/index.tsx","webpack:///./app/containers/Vote/index.tsx","webpack:///./app/containers/Admin/index.tsx","webpack:///./app/containers/Home/index.tsx","webpack:///./app/actions/todos.ts","webpack:///./app/middleware/logger.ts","webpack:///./app/reducers/todos.ts","webpack:///./app/reducers/elections.ts","webpack:///./app/reducers/user.ts","webpack:///./app/reducers/index.ts","webpack:///./app/store/index.ts","webpack:///./main.tsx"],"names":["TodoModel","Election","Filter","ElectionState","__webpack_require__","d","__webpack_exports__","postData","url","data","fetch","method","mode","cache","credentials","headers","Content-Type","redirect","referrer","body","JSON","stringify","then","response","json","API_BASE","TI_LOGO","module","exports","bp3-navbar","icon","appContainer","container","card","status","enrollContainer","panel","App","react__WEBPACK_IMPORTED_MODULE_0__","react_router__WEBPACK_IMPORTED_MODULE_1__","react_router__WEBPACK_IMPORTED_MODULE_2__","app_containers_Home__WEBPACK_IMPORTED_MODULE_3__","app_containers_Vote__WEBPACK_IMPORTED_MODULE_4__","react_hot_loader__WEBPACK_IMPORTED_MODULE_5__","Object","path","component","Vote","_super","props","context","_this","call","this","state","selected","undefined","username","election","isUserLoaded","renderCurrentBreadcrumb","_a","text","restProps","__rest","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_2__","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_3__","renderBreadcrumb","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_4__","className","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_5__","MINIMAL","onClick","href","window","location","handleVoteSubmit","candidate","routeParams","match","params","request","userToken","app_utils__WEBPACK_IMPORTED_MODULE_16__","id","round","reload","renderCard","disable","isSelected","elevation","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_6__","THREE","ZERO","interactive","setState","submitButton","intent","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_7__","PRIMARY","confirm","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_8__","_style_css__WEBPACK_IMPORTED_MODULE_1__","key","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_9__","renderCards","currentCandidates","map","c","renderCardsClosed","renderPageBody","app_models__WEBPACK_IMPORTED_MODULE_15__","ACTIVE","console","log","__extends","prototype","componentDidMount","warn","loadUser","loadElection","electionId","r","sent","resp","render","roundText","BREADCRUMBS","push","position","breadcrumbs","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_10__","currentBreadcrumbRenderer","breadcrumbRenderer","items","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_11__","Group","align","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_12__","LEFT","src","Heading","Divider","RIGHT","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_13__","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_14__","BOTTOM_LEFT","content","disabled","adminToaster","toaster","create","Admin_Admin","Admin","isEnrollOpen","isNewOpen","isAdministerOpen","newElectionState","candidates","enrollState","toggleEnroll","toggleNew","toggleAdminister","onEnrollChange","event","getElementValue","renderEnrollForm","react","Admin_style","style","width","height","onInput","buttons","minimal","handleAddUsers","handleSendEmail","currentTarget","value","onPositionChange","onIconChange","onCandidateChange","checknewElectionState","handleNewElection","__assign","adminToken","utils","ids","split","added","show","message","catch","renderNewElectionForm","formGroup","label","inputGroup","placeholder","textArea","onToggleElection","__awaiter","models","CLOSED","renderElectionControls","inner","elections","e","controls","COMPLETED","checked","onChange","bind","large","collapse","isOpen","Home_Home","Home","isAdmin","isAdminOpen","breadcrumb","common","mapStateToIntent","WARNING","SUCCESS","TWO","replace","html","iconSize","tag","toLocaleUpperCase","filter","handleOpen","handleClose","Home_extends","loadElections","parse","adminButton","breadcrumbs_breadcrumbs","cards","length","pageBody","drawer","onClose","title","Home_assign","padding","display","flexDirection","justifyContent","navbar","alignment","tooltip","defaultProps","todos_TodoActions","TodoActions","Type","logger","store","next","action","addTodo","createAction","ADD_TODO","editTodo","EDIT_TODO","deleteTodo","DELETE_TODO","completeTodo","COMPLETE_TODO","completeAll","COMPLETE_ALL","clearCompleted","CLEAR_COMPLETED","todoReducer","handleActions","payload","reduce","max","todo","Math","completed","elections_initialState","startingCandidates","electionReducer","userReducer","rootReducer","redux","todos","user","initialState","middleware","main_store","react_dom","es","BrowserRouter","basename","app","document","getElementById"],"mappings":"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","file":"app.e408a48268bddfc60c3d.js","sourcesContent":["/** TodoMVC model definitions **/\n\nexport interface TodoModel {\n  id: number;\n  text: string;\n  completed: boolean;\n}\n\nexport namespace TodoModel {\n  export enum Filter {\n    SHOW_ALL = 'all',\n    SHOW_ACTIVE = 'active',\n    SHOW_COMPLETED = 'completed'\n  }\n}\n","import { IconName } from \"@blueprintjs/core\";\n\nexport interface Election {\n  id: string;\n  position: string;\n  icon: IconName;\n  state: Election.ElectionState;\n  startingCandidates: string[];\n  currentCandidates: string[];\n  round: number;\n}\n\nexport namespace Election {\n  export enum ElectionState {\n    ACTIVE = 'active',\n    CLOSED = 'closed',\n    COMPLETED = 'completed'\n  }\n}\n","export * from './TodoModel';\nexport * from './ElectionModel';\n","export function omit<T extends object, K extends keyof T>(target: T, ...omitKeys: K[]): Omit<T, K> {\n  return (Object.keys(target) as K[]).reduce(\n    (res, key) => {\n      if (!omitKeys.includes(key)) {\n        res[key] = target[key];\n      }\n      return res;\n    },\n    {} as any\n  );\n}\n\nexport function postData(url = ``, data = {}) {\n  // Default options are marked with *\n    return fetch(url, {\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, cors, *same-origin\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: \"same-origin\", // include, *same-origin, omit\n        headers: {\n            \"Content-Type\": \"application/json\",\n            // \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        redirect: \"follow\", // manual, *follow, error\n        referrer: \"no-referrer\", // no-referrer, *client\n        body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n    })\n    .then(response => response.json()); // parses response to JSON\n}\n\nexport const API_BASE = 'http://localhost:3001/api';\n\nexport const TI_LOGO = 'https://pbs.twimg.com/profile_images/616272772101058560/elds97gt_400x400.jpg';","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bp3-navbar\":\"_1QBS-\",\"icon\":\"_1XDwq\",\"appContainer\":\"A0bEz\",\"container\":\"_3STa4\",\"card\":\"_3GXg9\",\"status\":\"_3A6eD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bp3-navbar\":\"Umufu\",\"icon\":\"_317XQ\",\"appContainer\":\"_38uYc\",\"enrollContainer\":\"_2_RCp\",\"container\":\"_2JYvX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bp3-navbar\":\"_24KmK\",\"icon\":\"_3JqjV\",\"appContainer\":\"_2L3lj\",\"container\":\"_219xi\",\"panel\":\"_19B1j\",\"card\":\"_1lliC\",\"status\":\"_128qD\"};","import * as React from 'react';\nimport { Route, Switch } from 'react-router';\n// import { App as TodoApp } from 'app/containers/App';\nimport { Home } from \"app/containers/Home\";\nimport { Vote } from \"app/containers/Vote\";\nimport { hot } from 'react-hot-loader';\n\nexport const App = hot(module)(() => (\n  <Switch>\n    <Route path=\"/:userToken/election/:electionId\" component={Vote} />\n    <Route path=\"/:userToken\" component={Home} />\n  </Switch>\n));\n","import * as React from 'react';\nimport * as style from './style.css';\nimport { \n  Navbar,\n  Button,\n  Alignment,\n  Breadcrumb,\n  Breadcrumbs,\n  IBreadcrumbProps,\n  Icon,\n  Classes,\n  H3,\n  Tooltip,\n  Position,\n  Card,\n  Elevation,\n  Intent\n} from \"@blueprintjs/core\";\nimport { RouteComponentProps } from 'react-router';\nimport { Election } from 'app/models';\nimport { IAdminResponse } from \"../Home\";\nimport { API_BASE, postData, TI_LOGO } from 'app/utils';\n\nexport namespace Vote {\n  export interface Props extends RouteComponentProps<void> {\n  }\n\n  export interface State {\n    selected: string | undefined;\n    username: string | undefined;\n    election: Election | undefined;\n    isUserLoaded: boolean,\n  }\n}\n\nexport interface IRouteParams {\n  electionId: string;\n  userToken: string;\n}\n\nexport class Vote extends React.Component<Vote.Props, Vote.State> {\n  public state: Vote.State = {\n    selected: undefined,\n    username: undefined,\n    election: undefined,\n    isUserLoaded: false,\n  }\n\n  constructor(props: Vote.Props, context?: any) {\n    super(props, context);\n  }\n\n  public componentDidMount() {\n      console.warn(\"Vote component mounted\");\n      this.loadUser();\n      this.loadElection();\n  }\n\n  public async loadElection() {\n      const routeParams = (this.props.match.params as unknown) as IRouteParams;\n      const election = await fetch(`${API_BASE}/election/${routeParams.electionId}`).then(r => r.json()) as Election;\n      this.setState({ election });\n  }\n\n  public async loadUser() {\n      const routeParams = (this.props.match.params as unknown) as IRouteParams;\n      const resp = await fetch(`http://localhost:3001/api/users/${routeParams.userToken}`).then((response) => response.json()) as IAdminResponse;\n      this.setState({ username: resp.username, isUserLoaded: true });\n  }\n\n  private renderCurrentBreadcrumb = ({ text, ...restProps }: IBreadcrumbProps) => {\n    return <Breadcrumb><Icon icon={restProps.icon} /> {text}</Breadcrumb>;\n  }\n\n  private renderBreadcrumb = ({ text, ...restProps }: IBreadcrumbProps) => {\n    return <Breadcrumb><Button icon={restProps.icon} className={Classes.MINIMAL} text={text} onClick={() => {\n      if (restProps.href) {\n        window.location.href = restProps.href;\n      }\n    }}/></Breadcrumb>;\n  }\n\n  private handleVoteSubmit = (candidate: string) => {\n    const routeParams = (this.props.match.params as unknown) as IRouteParams;\n    const { election } = this.state;\n\n    const request = { candidate, userToken: routeParams.userToken };\n    postData(`${API_BASE}/vote/${election!.id}/${election!.round}`, request).then(() => {\n      window.location.reload();\n    })\n  }\n\n  private renderCard = (candidate: string, disable: boolean) => {\n    const { selected } = this.state;\n    const isSelected = selected !== undefined && selected == candidate;\n    let elevation = isSelected ? Elevation.THREE: Elevation.ZERO;\n    let interactive = true;\n    let onClick = () => {\n          this.setState({\n            selected: candidate,\n          })\n        };\n\n    const submitButton = isSelected ? <Button intent={Intent.PRIMARY} text={\"Submit Vote\"} icon=\"tick\"\n      onClick={() => {\n        if(confirm(`Do you want to cast your vote for ${candidate}?`)) {\n          this.handleVoteSubmit(candidate);\n        }\n      }}\n    /> : undefined;\n\n    if (disable) {\n      elevation = Elevation.ZERO;\n      interactive = false;\n      onClick = () => {};\n    }\n    return (\n      <Card\n        interactive={interactive}\n        elevation={elevation}\n        className={style.card}\n        onClick={onClick}\n        key={candidate}\n      >\n        <H3>{candidate}</H3>\n        {submitButton}\n      </Card>\n    );\n  }\n\n  private renderCards = (election: Election) => {\n    const candidates = election.currentCandidates;\n    return candidates.map(c => this.renderCard(c, false));\n  }\n\n  private renderCardsClosed = (election: Election) => {\n    const candidates = election.currentCandidates;\n    return candidates.map(c => this.renderCard(c, true));\n  }\n\n  private renderPageBody = () => {\n    const { election, username, isUserLoaded } = this.state;\n    if (!username && isUserLoaded ) {\n      return <div>\n        <H3>You are not authenticated!</H3>\n        <p>Please confirm that your user token is correct and try again.</p>\n      </div>\n    } else if (!election || !isUserLoaded) {\n      console.log(this.state);\n      return <div>Loading...</div>;\n    }\n    else if (election.state == Election.ElectionState.ACTIVE) {\n      return this.renderCards(election);\n    } else {\n      return this.renderCardsClosed(election);\n    }\n  }\n\n  render() {\n    const routeParams = (this.props.match.params as unknown) as IRouteParams;\n    const { election } = this.state;\n    const roundText = election && election.round >= 1 ? `(Round ${election.round})` : \"\";\n    const BREADCRUMBS: IBreadcrumbProps[] = [\n        { href: `/${routeParams.userToken}`, icon: \"layers\", text: \"All Elections\" },\n      ];\n    if (election) {\n      BREADCRUMBS.push(\n        { href: `/${routeParams.userToken}/election/${election.id}`, icon: election.icon, text: `${election.position} ${roundText}` }\n      );\n    }\n\n    const breadcrumbs = (\n          <Breadcrumbs\n              currentBreadcrumbRenderer={this.renderCurrentBreadcrumb}\n              breadcrumbRenderer={this.renderBreadcrumb}\n              items={BREADCRUMBS}\n          />\n      );\n\n    return (\n      <div className={style.appContainer}>\n        <Navbar>\n          <Navbar.Group align={Alignment.LEFT}>\n            <img className={style.icon} src={TI_LOGO} />\n            <Navbar.Heading>TFI Elections Portal</Navbar.Heading>\n            <Navbar.Divider />\n            { breadcrumbs }\n          </Navbar.Group>\n          <Navbar.Group align={Alignment.RIGHT}>\n            <Tooltip\n              position={Position.BOTTOM_LEFT}\n              content={\"Signed in as \" +this.state.username}\n              disabled={!this.state.username}\n            >\n              <Button className=\"bp3-minimal\" icon=\"person\" />\n            </Tooltip>\n          </Navbar.Group>\n        </Navbar>\n        <div className={style.container} >\n          <div className={style.panel}>\n              {this.renderPageBody()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport * as style from './style.css';\nimport { \n  Button, Collapse, Intent, FormGroup, InputGroup, TextArea, Toaster, Switch\n} from \"@blueprintjs/core\";\nimport { RouteComponentProps } from 'react-router';\nimport { postData, API_BASE } from \"app/utils\";\nimport { Election } from 'app/models';\n\nexport namespace Admin {\n  export interface Props extends RouteComponentProps<void> {\n    adminToken: string,\n    elections: Election[],\n  }\n\n  export interface State {\n      isEnrollOpen: boolean;\n      isNewOpen: boolean;\n      isAdministerOpen: boolean;\n      newElectionState: INewElectionState;\n      enrollState: string;\n  }\n}\n\nexport interface INewElectionState {\n  position: string,\n  icon: string,\n  candidates: string,\n}\n\nconst adminToaster = Toaster.create();\n\n\nexport class Admin extends React.Component<Admin.Props, Admin.State> {\n\n  constructor(props: Admin.Props, context?: any) {\n    super(props, context);\n    // this.handleClearCompleted = this.handleClearCompleted.bind(this);\n    // this.handleFilterChange = this.handleFilterChange.bind(this);\n    this.onPositionChange = this.onPositionChange.bind(this);\n  }\n\n  public state: Admin.State = {\n      isEnrollOpen: false,\n      isNewOpen: false,\n      isAdministerOpen: false,\n      newElectionState: {\n        position: \"\",\n        icon: \"\",\n        candidates: \"\",\n      },\n      enrollState: \"\"\n  }\n\n  public componentDidMount() {\n      console.warn(\"Admin component mounted\");\n\n  }\n\n  public toggleEnroll = () => this.setState({ isEnrollOpen: !this.state.isEnrollOpen });\n  public toggleNew = () => this.setState({ isNewOpen: !this.state.isNewOpen });\n  public toggleAdminister = () => this.setState({ isAdministerOpen: !this.state.isAdministerOpen });\n\n\n  private onEnrollChange = (event: React.FormEvent<HTMLTextAreaElement>) => {\n    const enrollState = this.getElementValue(event);\n    this.setState({ enrollState });\n  }\n\n  public renderEnrollForm = () => {\n      return (\n          <div className={style.enrollContainer}>\n              <textarea style={{ width: \"100%\", height: \"300px\" }} onInput={this.onEnrollChange} />\n              <Button intent={Intent.PRIMARY} minimal={true} icon=\"plus\" text=\"Add Voters\"\n                onClick={this.handleAddUsers}\n              />\n              <Button intent={Intent.PRIMARY} minimal={true} icon=\"circle-arrow-right\" text=\"Send Links\" \n                onClick={this.handleSendEmail}\n              />\n          </div>\n      )\n  }\n\n  private getElementValue = (event: React.FormEvent) => {\n    let element = event.currentTarget as HTMLInputElement;\n    return element.value;\n  }\n\n  private onPositionChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const newElectionState = this.state.newElectionState;\n    newElectionState.position = this.getElementValue(event);\n    this.setState({ newElectionState });\n  }\n\n  private onIconChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const newElectionState = this.state.newElectionState;\n    newElectionState.icon = this.getElementValue(event);\n    this.setState({ newElectionState });\n  }\n\n  private onCandidateChange = (event: React.FormEvent<HTMLTextAreaElement>) => {\n    const newElectionState = this.state.newElectionState;\n    newElectionState.candidates = this.getElementValue(event);\n    this.setState({ newElectionState });\n  }\n\n  private checknewElectionState = (): boolean => {\n    const { newElectionState } = this.state;\n    return (newElectionState.position !== \"\" && newElectionState.icon !== \"\" && newElectionState.candidates !== \"\")\n  }\n\n  private handleNewElection = () => {\n    if (!this.checknewElectionState()) {\n      console.warn(\"Something is incorrect...\");\n      return;\n    }\n    const request = { adminToken: this.props.adminToken, ...this.state.newElectionState };\n    postData(`${API_BASE}/election/create`, request).then(() => {\n      window.location.reload();\n    });\n  }\n\n  private handleAddUsers = () => {\n    const ids = this.state.enrollState.split('\\n');\n    postData(`${API_BASE}/users/add`, { ids, adminToken: this.props.adminToken }).then((resp) => {\n      const { added } = resp;\n      adminToaster.show({ message: `Successfully added ${added} users` , intent: \"success\" });\n    }).catch(() => {\n      adminToaster.show({ message: `Something went wrong!`, intent: \"danger\" })\n    })\n  }\n\n  private handleSendEmail = () => {\n    postData(`${API_BASE}/users/email`, { adminToken: this.props.adminToken }).then((resp) => {\n      adminToaster.show({ message: \"Links sent to voters\", intent: \"success\" })\n    });\n  }\n\n  public renderNewElectionForm = () => {\n    return (\n        <div className={style.enrollContainer}>\n            <FormGroup label={\"Position\"} >\n                <InputGroup\n                  id=\"new-election-position\"\n                  placeholder={\"President\"}\n                  onInput={this.onPositionChange}\n                />\n            </FormGroup>\n            <FormGroup label={\"Icon\"} >\n                <InputGroup id=\"new-election-icon\" placeholder={\"globe-network\"} onInput={this.onIconChange} />\n            </FormGroup>\n            <FormGroup label={\"Candidates\"}>\n                <TextArea\n                    intent={Intent.PRIMARY}\n                    style={{ width: \"100%\", height: \"150px\" }}\n                    placeholder={\"Enter one candidate per line\"}\n                    onInput={this.onCandidateChange}\n                />\n            </FormGroup>\n            <Button intent={Intent.PRIMARY} minimal={true} icon=\"add\" text=\"Add Election\" onClick={this.handleNewElection} />\n        </div>\n    );\n  }\n\n  private onToggleElection = async (election: Election) => {\n    // start-round\n    if (election.state == Election.ElectionState.CLOSED) {\n      postData(`${API_BASE}/election/${election.id}/start-round`).then(() => {\n        window.location.reload();\n      })\n    // stop-round\n    } else if (election.state == Election.ElectionState.ACTIVE) {\n      postData(`${API_BASE}/election/${election.id}/stop-round`).then(() => {\n        window.location.reload();\n      })\n    } else {\n      // do nothing\n    }\n  }\n\n  private renderElectionControls = () => {\n    const { elections } = this.props;\n    const inner = elections.map(e => {\n      return <Switch \n        label={e.position}\n        disabled={e.state == Election.ElectionState.COMPLETED}\n        checked={e.state == Election.ElectionState.ACTIVE}\n        onChange={() => this.onToggleElection(e)}\n        key={e.id}\n      />\n    });\n    return <FormGroup>\n      { inner }\n    </FormGroup>\n  }\n\n  render() {\n    return (\n      <div className={style.appContainer}>\n        <div className={style.container} >\n          <div className={style.panel}>\n              <Button \n                text=\"Enroll Voters\"\n                onClick={this.toggleEnroll}\n                icon={this.state.isEnrollOpen ? \"caret-down\" : \"caret-right\"}\n                large={true} \n                minimal={true}\n              />\n              <Collapse isOpen={this.state.isEnrollOpen}>\n                {this.renderEnrollForm()}\n                </Collapse>\n              <Button\n                text=\"New Election\"\n                onClick={this.toggleNew}\n                icon={this.state.isNewOpen? \"caret-down\" : \"caret-right\"}\n                minimal={true}\n                large={true}\n               />\n              <Collapse isOpen={this.state.isNewOpen}>\n                    {this.renderNewElectionForm()}\n                </Collapse>\n              <Button\n                text=\"Administer Election\"\n                onClick={this.toggleAdminister}\n                icon={this.state.isAdministerOpen ? \"caret-down\" : \"caret-right\"}\n                large={true}\n                minimal={true}\n               />\n              <Collapse isOpen={this.state.isAdministerOpen}>\n                {this.renderElectionControls()}\n                </Collapse>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport * as style from './style.css';\nimport { \n  Navbar,\n  Button,\n  Alignment,\n  Breadcrumb,\n  Breadcrumbs,\n  IBreadcrumbProps,\n  Icon,\n  Classes,\n  H3,\n  Tooltip,\n  Position,\n  Card,\n  Elevation,\n  Tag,\n  Intent,\n  Drawer\n} from \"@blueprintjs/core\";\nimport { RouteComponentProps } from 'react-router';\n// import { RootState } from 'app/reducers';\nimport { Election } from 'app/models';\nimport { Admin } from '../Admin';\nimport { TI_LOGO } from \"app/utils\";\n\nexport namespace Home {\n  export interface Props extends RouteComponentProps<void> {\n    // elections: RootState.ElectionState;\n  }\n\n  export interface State {\n    isAdmin: boolean | undefined;\n    username: string | undefined;\n    isAdminOpen: boolean;\n    elections: Election[];\n  }\n}\n\nexport interface IRouteParams {\n  userToken: string;\n}\n\nexport interface IAdminResponse {\n  isAdmin: boolean;\n  username: string | undefined;\n}\n\nexport class Home extends React.Component<Home.Props, Home.State> {\n  static defaultProps: Partial<Home.Props> = {\n  };\n\n  public state: Home.State = {\n    isAdmin: undefined,\n    username: undefined,\n    isAdminOpen: false,\n    elections: []\n  }\n\n  constructor(props: Home.Props, context?: any) {\n    super(props, context);\n  }\n\n  public componentDidMount() {\n      console.warn(\"Home component mounted\");\n      this.isAdmin();\n      this.loadElections()\n  }\n\n  private async loadElections() {\n    const resp = await fetch(`http://localhost:3001/api/election/all`).then((value) => value.json()) as string[];\n    const elections: Election[] = resp.map(r => JSON.parse(r));\n    this.setState({ elections })\n  }\n\n  private async isAdmin() {\n      const routeParams = (this.props.match.params as unknown) as IRouteParams;\n      const resp = await fetch(`http://localhost:3001/api/users/${routeParams.userToken}`).then((response) => response.json()) as IAdminResponse;\n      this.setState({\n        isAdmin: resp.isAdmin,\n        username: resp.username\n      });\n  }\n\n\n  private renderCurrentBreadcrumb = ({ text, ...restProps }: IBreadcrumbProps) => {\n    return <Breadcrumb><Icon icon={restProps.icon} /> {text}</Breadcrumb>;\n  }\n\n  private renderBreadcrumb = ({ text, ...restProps }: IBreadcrumbProps) => {\n    return <Breadcrumb><Button icon={restProps.icon} className={Classes.MINIMAL} text={text} onClick={() => {\n      if (restProps.href) {\n        window.location.href = restProps.href;\n      }\n    }}/></Breadcrumb>;\n  }\n\n  private mapStateToIntent = (state: Election.ElectionState) => {\n    if (state == Election.ElectionState.ACTIVE) {\n      return Intent.PRIMARY;\n    } else if (state == Election.ElectionState.CLOSED) {\n      return Intent.WARNING;\n    } else {\n      return Intent.SUCCESS;\n    }\n  }\n\n  private renderCard = (election: Election) => {\n    const routeParams = (this.props.match.params as unknown) as IRouteParams;\n    const roundText = election.round >= 1 ? `(Round ${election.round})` : \"\";\n    return (\n      <Card\n        interactive={true}\n        elevation={Elevation.TWO}\n        className={style.card}\n        onClick={() => {\n          window.location.href = `${routeParams.userToken.replace('//','/')}/election/${election.id}`\n        }}\n        key={election.id}\n      >\n        <H3>{election.position}</H3>\n        <Icon icon={election.icon} iconSize={40} />\n        <Tag intent={this.mapStateToIntent(election.state)} className={style.status} > \n          {election.state.toLocaleUpperCase()} {roundText}\n        </Tag>\n      </Card>\n    );\n  }\n\n  private renderCards = (state: Election.ElectionState) => {\n    const elections = this.state.elections;\n    return elections.filter(e => e.state == state).map(this.renderCard);\n  }\n\n  private handleOpen = () => this.setState({ isAdminOpen: true });\n  private handleClose = () => this.setState({ isAdminOpen: false });\n\n  render() {\n    const { elections, username } = this.state;\n    const routeParams = (this.props.match.params as unknown) as IRouteParams;\n    const adminButton = this.state.isAdmin ? (\n            <Button className=\"bp3-minimal\" icon=\"dashboard\" text=\"Admin\" onClick={this.handleOpen} /> \n        ) : undefined;\n\n        const BREADCRUMBS: IBreadcrumbProps[] = [\n          { href: `/${routeParams.userToken}`, icon: \"layers\", text: \"All Elections\" },\n      ];\n\n    const breadcrumbs = (\n          <Breadcrumbs\n              currentBreadcrumbRenderer={this.renderCurrentBreadcrumb}\n              breadcrumbRenderer={this.renderBreadcrumb}\n              items={BREADCRUMBS}\n          />\n      );\n\n    const cards = elections.length > 0 ? (\n        <div>\n          <div className={style.container} >\n            {this.renderCards(Election.ElectionState.ACTIVE)}\n          </div>\n          <div className={style.container} >\n            {this.renderCards(Election.ElectionState.CLOSED)}\n          </div>\n          <div className={style.container} >\n            {this.renderCards(Election.ElectionState.COMPLETED)}\n          </div>\n        </div>\n    ) : undefined;\n\n    const pageBody = this.state.username ? \n      <div>\n        { cards }\n        <Drawer\n          icon=\"dashboard\"\n          onClose={this.handleClose}\n          title={\"Administer Elections\"}\n          isOpen={this.state.isAdminOpen}\n        >\n          <Admin adminToken={routeParams.userToken} elections={this.state.elections} {...this.props} />\n        </Drawer>\n      </div> : <div style={{ padding: \"50px\", display: \"flex\", flexDirection: \"column\", justifyContent: \"center\" }}>\n        <H3>You are not authenticated!</H3>\n        <p>Please confirm that your user token is correct and try again.</p>\n      </div>;\n\n\n    return (\n      <div className={style.appContainer}>\n        <Navbar>\n          <Navbar.Group align={Alignment.LEFT}>\n            <img className={style.icon} src={TI_LOGO} />\n            <Navbar.Heading>TFI Elections Portal</Navbar.Heading>\n            <Navbar.Divider />\n            { breadcrumbs }\n          </Navbar.Group>\n          <Navbar.Group align={Alignment.RIGHT}>\n            {adminButton}\n            <Tooltip position={Position.BOTTOM_LEFT} content={\"Signed in as \" + username} disabled={!username}>\n              <Button className=\"bp3-minimal\" icon=\"person\" />\n            </Tooltip>\n          </Navbar.Group>\n        </Navbar>\n        { pageBody }\n      </div>\n    );\n  }\n}\n","import { createAction } from 'redux-actions';\nimport { TodoModel } from 'app/models';\n\nexport namespace TodoActions {\n  export enum Type {\n    ADD_TODO = 'ADD_TODO',\n    EDIT_TODO = 'EDIT_TODO',\n    DELETE_TODO = 'DELETE_TODO',\n    COMPLETE_TODO = 'COMPLETE_TODO',\n    COMPLETE_ALL = 'COMPLETE_ALL',\n    CLEAR_COMPLETED = 'CLEAR_COMPLETED'\n  }\n\n  export const addTodo = createAction<PartialPick<TodoModel, 'text'>>(Type.ADD_TODO);\n  export const editTodo = createAction<PartialPick<TodoModel, 'id'>>(Type.EDIT_TODO);\n  export const deleteTodo = createAction<TodoModel['id']>(Type.DELETE_TODO);\n  export const completeTodo = createAction<TodoModel['id']>(Type.COMPLETE_TODO);\n  export const completeAll = createAction(Type.COMPLETE_ALL);\n  export const clearCompleted = createAction(Type.CLEAR_COMPLETED);\n}\n\nexport type TodoActions = Omit<typeof TodoActions, 'Type'>;\n","import { Middleware } from 'redux';\n\nexport const logger: Middleware = (store) => (next) => (action) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.log(action);\n  }\n  return next(action);\n};\n","import { handleActions } from 'redux-actions';\nimport { RootState } from './state';\nimport { TodoActions } from 'app/actions/todos';\nimport { TodoModel } from 'app/models';\n\nconst initialState: RootState.TodoState = [\n  {\n    id: 1,\n    text: 'Use Redux',\n    completed: false\n  }\n];\n\nexport const todoReducer = handleActions<RootState.TodoState, TodoModel>(\n  {\n    [TodoActions.Type.ADD_TODO]: (state, action) => {\n      if (action.payload && action.payload.text) {\n        return [\n          {\n            id: state.reduce((max, todo) => Math.max(todo.id || 1, max), 0) + 1,\n            completed: false,\n            text: action.payload.text\n          },\n          ...state\n        ];\n      }\n      return state;\n    },\n    [TodoActions.Type.DELETE_TODO]: (state, action) => {\n      return state.filter((todo) => todo.id !== (action.payload as any));\n    },\n    [TodoActions.Type.EDIT_TODO]: (state, action) => {\n      return state.map((todo) => {\n        if (!todo || !action || !action.payload) {\n          return todo;\n        }\n        return (todo.id || 0) === action.payload.id ? { ...todo, text: action.payload.text } : todo;\n      });\n    },\n    [TodoActions.Type.COMPLETE_TODO]: (state, action) => {\n      return state.map((todo) =>\n        todo.id === (action.payload as any) ? { ...todo, completed: !todo.completed } : todo\n      );\n    },\n    [TodoActions.Type.COMPLETE_ALL]: (state, action) => {\n      return state.map((todo) => ({ ...todo, completed: true }));\n    },\n    [TodoActions.Type.CLEAR_COMPLETED]: (state, action) => {\n      return state.filter((todo) => todo.completed === false);\n    }\n  },\n  initialState\n);\n","import { handleActions } from 'redux-actions';\nimport { RootState } from './state';\nimport { Election  } from \"../models\";\n// import { TodoActions } from 'app/actions/todos';\n// import { TodoModel } from 'app/models';\n\nconst candidates = [\"PJ\", \"Rahul\"];\n\nconst initialState: RootState.ElectionState = [\n  {\n    id: \"000-000-000\",\n    state: Election.ElectionState.COMPLETED,\n    position: \"President\",\n    icon: \"globe\",\n    startingCandidates: candidates,\n    currentCandidates: candidates,\n    round: 0\n  },\n  {\n    id: \"000-000-001\",\n    state: Election.ElectionState.ACTIVE,\n    position: \"Vice President\",\n    icon: \"globe-network\",\n    startingCandidates: candidates,\n    currentCandidates: candidates,\n    round: 0\n  },\n  {\n    id: \"000-000-002\",\n    state: Election.ElectionState.CLOSED,\n    position: \"Treasurer\",\n    icon: \"dollar\",\n    startingCandidates: [],\n    currentCandidates: [],\n    round: 0\n\n  },\n  {\n    id: \"000-000-003\",\n    state: Election.ElectionState.CLOSED,\n    position: \"Social Chair\",\n    icon: \"people\",\n    startingCandidates: [],\n    currentCandidates: [],\n    round: 0\n  },\n  {\n    id: \"000-000-004\",\n    state: Election.ElectionState.CLOSED,\n    position: \"Safety Czar\",\n    icon: \"shield\",\n    startingCandidates: [],\n    currentCandidates: [],\n    round: 0\n\n  },\n  {\n    id: \"000-000-005\",\n    state: Election.ElectionState.CLOSED,\n    position: \"House Manager\",\n    icon: \"home\",\n    startingCandidates: [],\n    currentCandidates: [],\n    round: 0\n\n  }\n];\n\nexport const electionReducer = handleActions<RootState.ElectionState, Election>(\n  {},\n  initialState\n);\n","import { handleActions } from 'redux-actions';\nimport { RootState } from './state';\n// import { Election } from \"../models\";\n// import { TodoActions } from 'app/actions/todos';\n// import { TodoModel } from 'app/models';\n\nconst initialState: RootState.UserState = \"rahulm\";\n\nexport const userReducer = handleActions<RootState.UserState>(\n  {},\n  initialState\n);\n","import { combineReducers } from 'redux';\nimport { RootState } from './state';\nimport { todoReducer } from './todos';\nimport { electionReducer } from \"./elections\";\nimport { userReducer } from \"./user\";\n\nexport { RootState };\n\n// NOTE: current type definition of Reducer in 'redux-actions' module\n// doesn't go well with redux@4\nexport const rootReducer = combineReducers<Partial<RootState>>({\n  todos: todoReducer as any,\n  elections: electionReducer as any,\n  user: userReducer as any,\n});\n","import { Store, createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { logger } from 'app/middleware';\nimport { RootState, rootReducer } from 'app/reducers';\n\nexport function configureStore(initialState?: RootState): Store<RootState> {\n  let middleware = applyMiddleware(logger);\n\n  if (process.env.NODE_ENV !== 'production') {\n    middleware = composeWithDevTools(middleware);\n  }\n\n  const store = createStore(rootReducer as any, initialState as any, middleware) as Store<\n    RootState\n  >;\n\n  if (module.hot) {\n    module.hot.accept('app/reducers', () => {\n      const nextReducer = require('app/reducers');\n      store.replaceReducer(nextReducer);\n    });\n  }\n\n  return store;\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { createBrowserHistory } from 'history';\nimport { configureStore } from 'app/store';\n// import { Router } from 'react-router';\n// import { createBrowserHistory } from \"history\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { App } from './app';\n\n// prepare store\n// const history = createBrowserHistory({ basename: \"/\" });\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter basename=\"/\">\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}